def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
    apply plugin: 'com.android.internal.application'
}
else {
    apply plugin: 'com.android.library'
}

apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 30
    defaultConfig {
        if (buildAsApplication) {
            applicationId "org.libsdl.app"
        }
        minSdkVersion 20
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=android-16"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
            // cmake {
            //     arguments "-DANDROID_APP_PLATFORM=android-16", "-DANDROID_STL=c++_static"
            //     // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            //     abiFilters 'arm64-v8a'
            // }
        }
        externalNativeBuild.ndkBuild {
        //    arguments "FIREBASE_CPP_SDK_DIR=D:\\comtus\\Development\\android\\firebase_cpp_sdk_8.4.0\\firebase_cpp_sdk",
        //            "NDK_APPLICTION_MK=jni/Application.mk",
        //            sprintf("APP_PLATFORM=android-%d",
        //                    android.defaultConfig.minSdkVersion.mApiLevel)
        }
    }
    signingConfigs{
        release{
            storeFile file("myKey.jks");
            keyAlias "key0"

            keyPassword "12rhtmxm"
            storePassword "12rhtmxm"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            ndkBuild {
                path 'jni/Android.mk'
            }
            // cmake {
            //     path 'jni/CMakeLists.txt'
            // }
        }
       
    }
    lintOptions {
        abortOnError false
    }
    
    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:28.4.0')


    // Add the dependency for the Firebase SDK for Google Analytics
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-analytics'

    implementation 'com.google.firebase:firebase-core:19.0.1'
    implementation 'com.google.firebase:firebase-analytics:19.0.1'
    //implementation 'com.google.firebase:firebase-ads:20.3.0'
    implementation 'com.google.firebase:firebase-auth:21.0.1'
    implementation 'com.google.android.gms:play-services-auth:19.2.0'
    implementation 'com.google.firebase:firebase-database:20.0.1'
    implementation 'com.google.android.gms:play-services-base:17.6.0'

    // Add the dependencies for any other desired Firebase products
    // https://firebase.google.com/docs/android/setup#available-libraries
}